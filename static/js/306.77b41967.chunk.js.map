{"version":3,"file":"static/js/306.77b41967.chunk.js","mappings":"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","sources":["components/InputBox/index.tsx","services/email.ts","sections/ContactMePage/components/ContactModal/index.tsx","sections/ContactMePage/index.tsx"],"sourcesContent":["import { memo, useState, useEffect, ChangeEvent } from \"react\";\n\n/* Styling Utils */\nimport classNames from \"classnames\";\n\nexport type InputType = \"text\" | \"number\" | \"email\";\nexport type InputTypeValues = string | number;\n\ntype InputBoxProps = {\n    label?: string;\n    name: string;\n    value: InputTypeValues;\n    inputType?: InputType | \"textarea\";\n    className?: string;\n    onChange?: Function;\n    defaultValue?: InputTypeValues;\n    onBlur?: Function;\n    errorMsg?: string;\n    onlyValue?: boolean;\n};\n\nfunction InputBox({\n    label,\n    name,\n    value,\n    inputType = \"text\",\n    className = \"\",\n    defaultValue = \"\",\n    onChange,\n    onBlur,\n    errorMsg,\n    onlyValue = false,\n    ...props\n}: InputBoxProps) {\n    const [textValue, setTextValue] = useState<InputTypeValues>(\n        value ?? defaultValue ?? \"\"\n    );\n\n    const onTextChange = (\n        e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n    ) => {\n        setTextValue(e.target.value as InputType);\n    };\n\n    useEffect(() => {\n        if (onChange) {\n            if (onlyValue) onChange(name, textValue);\n            onChange(textValue);\n        }\n        // eslint-disable-next-line\n    }, [textValue]);\n\n    return (\n        <div className={classNames(\"my-1 flex\", className, \"flex-col\")}>\n            {label && (\n                <>\n                    <label htmlFor={name} className=\"font-bold\">\n                        {label} :\n                    </label>\n                </>\n            )}\n            {inputType !== \"textarea\" ? (\n                <input\n                    {...props}\n                    name={name}\n                    type={inputType ?? \"text\"}\n                    value={textValue}\n                    onChange={onTextChange}\n                    onBlur={onBlur as React.FocusEventHandler<HTMLInputElement>}\n                />\n            ) : (\n                <textarea\n                    {...props}\n                    name={name}\n                    value={textValue}\n                    rows={5}\n                    onChange={onTextChange}\n                    onBlur={\n                        onBlur as React.FocusEventHandler<HTMLTextAreaElement>\n                    }\n                />\n            )}\n            {errorMsg && <div className=\"text-red-600 text-sm\">{errorMsg}</div>}\n        </div>\n    );\n}\n\nexport default memo(InputBox);\n","import emailjs from \"@emailjs/browser\";\n\nfunction SendMail(body: any) {\n    const serviceId = process.env.REACT_APP_EMAIL_SERVICE_ID;\n    const templateId = process.env.REACT_APP_EMAIL_TEMPLATE;\n    const publicId = process.env.REACT_APP_EMAIL_PUBLIC_ID;\n\n    if (serviceId && templateId && publicId) {\n        emailjs.send(serviceId, templateId, body as any, publicId).then(\n            (result) => {\n                alert(\"Sent!, Please wait for my reply\");\n            },\n            (error) => {\n                console.error(error.text);\n            }\n        );\n    } else {\n        console.error(\"Email Credential not found failed\");\n    }\n}\n\nexport default SendMail;\n","import { memo } from \"react\";\n\nimport { useFormik } from \"formik\";\nimport * as Yup from \"yup\";\n\n/* Components */\nimport { DialogBox } from \"components/ModalBox\";\nimport InputBox from \"components/InputBox\";\nimport Button from \"components/Button\";\n\n/* Assets */\nimport ContactMeHero from \"assets/images/contact_me_hero.png\";\n\n/* Services */\nimport SendMail from \"services/email\";\n\ninterface ContactDetails {\n    name: string;\n    email: string;\n    contact_num?: string;\n    preferred_contact: string;\n    message: string;\n}\n\nconst phoneRegExp =\n    /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/;\n\nconst ContactSchema = Yup.object().shape({\n    name: Yup.string()\n        .min(4, \"Too Short!\")\n        .max(20, \"Too Long!!\")\n        .required(\"Required to identify, please\"),\n    email: Yup.string()\n        .email(\"Invalid email\")\n        .required(\"Required for communication\"),\n    contact_no: Yup.string().matches(phoneRegExp, \"Phone number is not valid\"),\n    message: Yup.string()\n        .min(2, \"Too Short!\")\n        .max(150, \"Too Long!\")\n        .required(\"Required\"),\n});\n\nconst initialState: ContactDetails = {\n    name: \"\",\n    email: \"\",\n    contact_num: \"\",\n    preferred_contact: \"e-mail\",\n    message: \"\",\n};\n\ntype ContactModalProps = {\n    openModal: boolean;\n    toggleModal: () => void;\n};\n\nfunction ContactModal({ openModal, toggleModal }: ContactModalProps) {\n    const formik = useFormik({\n        initialValues: initialState,\n        validationSchema: ContactSchema,\n        validateOnChange: true,\n        validateOnBlur: true,\n        validateOnMount: true,\n        enableReinitialize: true,\n        onSubmit: () => {},\n    });\n\n    const requestToSendMail = () => {\n        if (formik.isValid) {\n            const form: any = {\n                name: formik.values.name,\n                user_email: formik.values.email,\n                contact_num: formik.values.contact_num,\n                message: formik.values.message,\n                preferred_contact: formik.values.preferred_contact,\n            };\n\n            SendMail(form);\n        }\n    };\n\n    return (\n        <DialogBox\n            open={openModal}\n            title={\"Contact Me\"}\n            showTitle={false}\n            handleClose={toggleModal}\n            showActions={false}\n        >\n            <div className=\"flex\">\n                <div className=\"mb-3 md:px-6 px-3 pt-6 flex-1\">\n                    <InputBox\n                        name=\"name\"\n                        label=\"Name\"\n                        value={formik.values.name}\n                        onChange={formik.handleChange(\"name\")}\n                        onBlur={formik.handleBlur(\"name\")}\n                        {...(formik.touched.name && {\n                            errorMsg: formik.errors.name,\n                        })}\n                        onlyValue={true}\n                    />\n                    <InputBox\n                        name=\"email\"\n                        label=\"E-mail\"\n                        inputType={\"email\"}\n                        value={formik.values.email}\n                        onChange={formik.handleChange(\"email\")}\n                        onBlur={formik.handleBlur(\"email\")}\n                        {...(formik.touched.email && {\n                            errorMsg: formik.errors.email,\n                        })}\n                        onlyValue={true}\n                    />\n                    <InputBox\n                        name=\"contact_num\"\n                        label=\"Contact No.\"\n                        value={formik.values.contact_num ?? \"\"}\n                        onChange={formik.handleChange(\"contact_num\")}\n                        onBlur={formik.handleBlur(\"contact_num\")}\n                        {...(formik.touched.contact_num && {\n                            errorMsg: formik.errors.contact_num,\n                        })}\n                        onlyValue={true}\n                    />\n                    <div className=\"flex flex-col\">\n                        <label htmlFor=\"preferred_contact\">\n                            Preferred way to Contact\n                        </label>\n                        <select\n                            name=\"preferred_contact\"\n                            value={formik.values.preferred_contact}\n                            onChange={formik.handleChange(\"contact_num\")}\n                            onBlur={formik.handleBlur(\"preferred_contact\")}\n                        >\n                            <option value={\"e-mail\"} selected>\n                                Email\n                            </option>\n\n                            <option value={\"phone\"}>Phone</option>\n                        </select>\n                    </div>\n                    <InputBox\n                        name=\"message\"\n                        label=\"Message\"\n                        inputType={\"textarea\"}\n                        value={formik.values.message}\n                        onChange={formik.handleChange(\"message\")}\n                        onBlur={formik.handleBlur(\"message\")}\n                        {...(formik.touched.message && {\n                            errorMsg: formik.errors.message,\n                        })}\n                        onlyValue={true}\n                    />\n\n                    <Button\n                        onClick={requestToSendMail}\n                        disabled={!formik.isValid}\n                        className=\"mt-3 mb-2\"\n                    >\n                        Contact Me\n                    </Button>\n                </div>\n                <div className=\"bg-[#5fc3ca] flex-1 hidden  md:flex justify-center items-center\">\n                    <img\n                        src={ContactMeHero}\n                        alt=\"contact me\"\n                        className=\"object-cover w-56\"\n                    />\n                </div>\n            </div>\n        </DialogBox>\n    );\n}\n\nexport default memo(ContactModal);\n","import { useState } from \"react\";\n\n/* Global Components */\nimport Heading from \"components/Heading\";\nimport Button from \"components/Button\";\n\n/* Components */\nimport ContactModal from \"./components/ContactModal\";\n\nfunction ContactMePage() {\n    const [openModal, setOpenModal] = useState<boolean>(false);\n\n    const toggleModal = (): void => {\n        setOpenModal((oldValue) => !oldValue);\n    };\n\n    return (\n        <section id=\"contact-me\" className=\"flex flex-col items-center\">\n            <Heading heading=\"Contact Me\" subHeading=\"Have a Chat ?\" />\n\n            <div className=\"max-w-4xl mx-4 p-6 rounded-md bg-gray-200 text-black flex-grow flex flex-col items-center\">\n                <h3 className=\"mb-4 text-center text-3xl font-bold underline tracking-wide font-headingFont\">\n                    Get In Touch\n                </h3>\n                <p>\n                    Although I'm not actively looking for any new opportunities\n                    , my inbox is always open for idea & opinions. Whether you\n                    have any questions or say 'Hi', I will try my best yo get\n                    back to you.\n                </p>\n                <Button className=\"my-4\" onClick={toggleModal}>\n                    Contact Me\n                </Button>\n            </div>\n\n            <ContactModal openModal={openModal} toggleModal={toggleModal} />\n        </section>\n    );\n}\n\nexport default ContactMePage;\n"],"names":["InputBox","label","name","value","inputType","className","defaultValue","onChange","onBlur","errorMsg","onlyValue","props","useState","textValue","setTextValue","onTextChange","e","target","useEffect","classNames","htmlFor","type","rows","memo","body","console","error","ContactSchema","Yup","shape","min","max","required","email","contact_no","matches","message","initialState","contact_num","preferred_contact","ContactModal","openModal","toggleModal","formik","useFormik","initialValues","validationSchema","validateOnChange","validateOnBlur","validateOnMount","enableReinitialize","onSubmit","open","title","showTitle","handleClose","showActions","values","handleChange","handleBlur","touched","errors","selected","Button","onClick","isValid","form","user_email","SendMail","disabled","src","ContactMeHero","alt","setOpenModal","oldValue","id","Heading","heading","subHeading"],"sourceRoot":""}